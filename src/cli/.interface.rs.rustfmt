use clap::{App, Arg, SubCommand};

use std::process::Command;

pub struct Interface {
  name: &str,
  public_key: [u8, 32],
  private_key: [u8; 32],
  listening_port: u16,
}

pub fn command<'a, 'b>() -> App<'a, 'b> {
    SubCommand::with_name("interfaces")
        .alias("if")
        .alias("interface")
        .subcommand(SubCommand::with_name("list").alias("ls"))
        .arg(Arg::with_name("interface"))
        .about("Interface tools")
}

pub fn run(args: &clap::ArgMatches) {
    match args.subcommand() {
        ("list", Some(_)) => list_interfaces(),
        _ => {}
    }

    if let Some(interface) = args.value_of("interface") {
        show_detail(interface);
    }
}

fn list_interfaces() {
    let output = Command::new("wg")
        .args(&["show", "interfaces"])
        .output()
        .expect("failed to execute process");

    if let Ok(interface_output) = std::str::from_utf8(&output.stdout) {
        println!("{}", interface_output);
    }
}

fn show_detail(interface: &str) {
    let command_output = Command::new("wg")
        .args(&["show", interface])
        .output()
        .expect("failed to execute process");

    if let Ok(interface_details) = std::str::from_utf8(&command_output.stdout) {
        println!("{}", interface_details);
    }
}
